# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13oSuXZh9Rk-mXFgEPuFv0OYUniNjQcVU
"""

import streamlit as st
import pandas as pd
import xgboost as xgb
import joblib

# ------------------------
# Load model & encoder
# ------------------------
model = joblib.load("xgb_model.pkl")        # ganti dengan file model hasil training
encoder = joblib.load("encoder.pkl")        # encoder OneHot atau ColumnTransformer
train_columns = joblib.load("train_columns.pkl")  # kolom akhir setelah encoding

st.title("üîÆ Hotel Booking Cancellation Prediction")
st.write("Coba masukkan detail booking, nanti model prediksi kemungkinan cancel.")

# ------------------------
# Input user (form)
# ------------------------
col1, col2 = st.columns(2)

with col1:
    hotel = st.selectbox("Hotel Type", ["City Hotel", "Resort Hotel"])
    lead_time = st.number_input("Lead Time (hari)", min_value=0, max_value=365, value=30)
    adults = st.number_input("Jumlah Adults", min_value=1, max_value=10, value=2)
    children = st.number_input("Jumlah Children", min_value=0, max_value=10, value=0)
    babies = st.number_input("Jumlah Babies", min_value=0, max_value=5, value=0)

with col2:
    market_segment = st.selectbox("Market Segment", ["Online TA", "Offline TA/TO", "Groups", "Direct", "Corporate"])
    distribution_channel = st.selectbox("Distribution Channel", ["TA/TO", "Direct", "Corporate", "GDS"])
    customer_type = st.selectbox("Customer Type", ["Transient", "Contract", "Group", "Transient-Party"])
    deposit_type = st.selectbox("Deposit Type", ["No Deposit", "Non Refund", "Refundable"])
    adr = st.number_input("Average Daily Rate (ADR)", min_value=0.0, max_value=1000.0, value=100.0)

# ------------------------
# Buat DataFrame dari input
# ------------------------
input_dict = {
    "hotel": [hotel],
    "lead_time": [lead_time],
    "adults": [adults],
    "children": [children],
    "babies": [babies],
    "market_segment": [market_segment],
    "distribution_channel": [distribution_channel],
    "customer_type": [customer_type],
    "deposit_type": [deposit_type],
    "adr": [adr],
}

df_input = pd.DataFrame(input_dict)

# ------------------------
# Encode sesuai training
# ------------------------
df_enc = encoder.transform(df_input)
df_enc = pd.DataFrame(df_enc, columns=encoder.get_feature_names_out(df_input.columns))

# Reindex biar kolom sama kayak training
df_enc = df_enc.reindex(columns=train_columns, fill_value=0)

# ------------------------
# Prediksi
# ------------------------
if st.button("Prediksi Cancel Booking"):
    prob = model.predict_proba(df_enc)[:, 1][0]
    if prob > 0.5:
        st.error(f"‚ö†Ô∏è Booking kemungkinan **dibatalkan** dengan probabilitas {prob:.2%}")
    else:
        st.success(f"‚úÖ Booking kemungkinan **tidak dibatalkan** (probabilitas cancel {prob:.2%})")